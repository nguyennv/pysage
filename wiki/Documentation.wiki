#summary how to use pysage

=Advanced Usage:=
==Automatic Message Packing/Unpacking==
{{{
# packing can be useful for sending messages across network
class MessageToPack(Message):
    properties = ['number']
    def pack_number(self, value):
        return (value.x, value.y)
    def unpack_number(self, value):
        return vector2(value[0], value[1])

# now this message will automatically be stored as a tuple (1,2)
# upon accessing, it will be converted to a vector object transparently
mgr.queue_message(MessageToPack(number=vector2(1,2)))
}}}
===Selective Queuing/Triggering==
{{{
# sends a particular object a message if that object implements this message type
#            returns True: if event was consumed
#                    False: otherwise
mgr.trigger_to_object(self, id, msg)
mgr.queue_message_to_object(self, id, msg)

}}}
==Grouping (Automatic Threads Management)==
{{{
class Consumer(MessageReceiver):
    subscriptions = ['SomeWorkDoneMessage']
    def handle_SomeWorkDoneMessage(self, msg):
        pass

class Worker(MessageReceiver):
    subscriptions = ['MoreWorkAvailMessage']
    def handle_MoreWorkAvailMessage(self, msg):
        pass
    def update(self, evt):
        '''this automatically gets called in a separate thread per tick'''
        do_some_routine_work()

# this will internally start a separate thread that all message receivers that belong to the "worker group" will run in
mgr.set_groups(['worker group'])

}}}